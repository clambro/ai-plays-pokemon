[project]
name = "ai-plays-pokemon"
version = "0.1.0"
description = ""
authors = [{ name = "Costa Lambrinoudis", email = "clambro.git@gmail.com" }]
requires-python = ">=3.13,<3.14"
readme = "README.md"
license = { file = "LICENSE" }
dependencies = [
    "pyboy[pyboy-core]>=2.5.2,<3",
    "numpy>=2.2.5,<3",
    "pillow>=11.2.1,<12",
    "pydantic>=2.11.3,<3",
    "loguru>=0.7.3,<0.8",
    "google-genai>=1.13.0,<2",
    "dotenv>=0.9.9,<0.10",
    "pydantic-settings>=2.9.1,<3",
    "aiofiles>=24.1.0,<25",
    "junjo[graphviz]>=0.46.0,<0.47",
    "sqlalchemy>=2.0.40,<3",
    "aiosqlite>=0.21.0,<0.22",
    "tenacity>=9.1.2,<10",
    "aiohttp>=3.12.13,<4",
]

[dependency-groups]
dev = [
    "pre-commit>=3.6.2,<4",
    "ruff>=0.12.0,<0.13",
    "pytest-asyncio>=1.0.0,<2",
    "poethepoet>=0.35.0,<0.36",
]

[tool.uv]
package = false

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.poe.tasks]
unit_tests = "python -m pytest -k unit"
integration_tests = "python -m pytest -k integration"
node_tests = "python -m pytest -k node"

[tool.ruff]
target-version = "py313"
line-length = 100

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in __init__
    "D203",  # 1 blank line required before class docstring
    "D205",  # 1 blank line required between summary line and description
    "D212",  # Multi-line docstring summary should start at the first line
    "D401",  # First line of docstring should be in imperative mood: "{first_line}"
    "INP001",  # File {filename} is part of an implicit namespace package. Add an __init__.py.
    "COM812",  # Enforce trailing commas (handled by the formatter).
    "EM101",  # Raw string in exception.
    "EM102",  # f-string in exception.
    "TRY003",  # Avoid specifying long messages outside the exception class
    "FIX002",  # Line contains TODO
    "TD002",   # Missing author in TODO `# TODO(<author_name>): ...`
    "TD003",   # Missing TODO link
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["validator"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]  # Ignore unused imports in inits.
"test_*.py" = [
    "S101",  # Asserts.
    "SLF001",  # Private member access.
]
"prompts.py" = ["E501"]  # Ignore line length in prompts

[tool.pytest.ini_options]
python_files = "**/tests/**/test_*.py"
asyncio_mode = "auto"
addopts = [
    "--import-mode=importlib"
]
markers =[
    "unit: mark a test as a unit test.",
    "integration: mark a test as an integration test",
    "node: mark a test as a node test",
]
